(()=>{const e={};window.polyUnits=e;!function(n=document){console.log("Monitor",n),n.addEventListener("DOMContentLoaded",function(){const n=document.querySelectorAll("*[polyclass]");console.log("Discovered",n.length);for(let s of n){let n=Math.random().toString(32).slice(2),t=new Polyclass({target:s});s.dataset.polyclassId=n,e[n]=t}}.bind(this))}();class n{constructor([n]=[]){this.units=e,console.log("me:",n);let s=new ClassGraph(n);s.generate(),this._graph=s,n?.processOnLoad&&this.processOnLoad(n.processOnLoad),n?.target&&this.process(n.target),this.innerProxyHandler={reference:this,get(e,n,s){let t=this.reference;if(n in t)return t[n].bind?t[n].bind(t):t[n]},apply(e,n,s){console.log("innerProxyHandler apply...",s)}},this.innerHead=function(e){},this.proxy=new Proxy(this.innerHead,this.innerProxyHandler)}processOnLoad(){return this._graph.processOnLoad.apply(this._graph,arguments)}process(){return this._graph.process.apply(this._graph,arguments)}add(e,n){return this._graph.addTree.apply(this._graph,arguments)}insertReceiver(e,n){return this._graph.addTree.apply(this._graph,arguments)}insertClassProps(e,n){return this._graph.insertLine.apply(this._graph,arguments)}insertRules(e){return this._graph.dcss.addStylesheetRules.apply(this._graph.dcss,arguments)}asString(){return this._graph.asCSSText()}}const s={safeSpace:{units:e},get(e,n,s){let t=this.getInstance();return n in t?t[n]&&t[n].bind?t[n].bind(t):t[n]:this.safeSpace[n]},newInstance(){return console.log("new instance",Array.from(arguments)),new n(Array.from(arguments)).proxy},getInstance(){return this._instance||(this._instance=this.newInstance.apply(this,arguments)),this._instance},apply(e,n,s){return console.log("Polyclass apply...",s),this.getInstance.apply(this,s)}};window.Polyclass=new Proxy((function(){return console.log("new",arguments),s.newInstance.apply(s,arguments)}),s)})();
//# sourceMappingURL=polyclass.js.map
