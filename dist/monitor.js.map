{"version":3,"file":"monitor.js","sources":["../src/addons/monitor.js"],"sourcesContent":["/**\r\n * # Monitor\r\n *\r\n * Monitor the HTML tree for dynamically inserted classes.\r\n * This ensures any class applied to a node _after_ first render\r\n * is discovered. It works through a mutation observer for the\r\n * attribute \"class\". This is useful for dynamic processing of HTML pages\r\n *\r\n * If the view is a SPA or all the possible classes are _used_ on\r\n * the view, this isn't required.\r\n */\r\n(()=>{\r\n\r\nlet cg;\r\n\r\nconst insertReceiver = function(){\r\n\r\n\r\n    ClassGraph.addons.monitorClasses = function(_cg){\r\n        cg = _cg;\r\n    }\r\n\r\n    ClassGraph.prototype.monitor = function(parent=document.body) {\r\n        return monitorClasses(parent)\r\n    }\r\n}\r\n\r\n\r\nconst monitorClasses = function(node) {\r\n    /*\r\n\r\n    Note: If Chrome mutation observer fails to detect a change\r\n    (But this function is called.), restart the tab, window or browser.\r\n     */\r\n\r\n    console.log('monitorClasses', node)\r\n    // configuration of the observer:\r\n    let config = {\r\n            attributes: true\r\n            , subtree: true\r\n            // , childList:true\r\n            , attributeFilter: ['class']\r\n            // , characterData: true\r\n            , attributeOldValue: true\r\n            // , characterDataOldValue: true\r\n        };\r\n\r\n    let eachMutation = function(mutation) {\r\n        // console.log('eachMutation', mutation)\r\n        if(mutation.attributeName == 'class') {\r\n            classMutationDetection(mutation)\r\n        }\r\n    }\r\n\r\n    let mutationHandler = function(mutations) {\r\n        // console.log('mutationHandler', mutations)\r\n        mutations.forEach(eachMutation);\r\n    }\r\n\r\n    let observer = new MutationObserver(mutationHandler);\r\n    // pass in the target node, as well as the observer options\r\n    observer.observe(node, config);\r\n\r\n    return observer\r\n}\r\n\r\n\r\nconst classMutationDetection = function(mutation) {\r\n    let classes = mutation.target.classList.value;\r\n    let old = mutation.oldValue\r\n    // console.log(`old: \"${mutation.oldValue}\", target:`\r\n    //             , mutation.target\r\n    //             , `classes: \"${classes}\"`\r\n    //         )\r\n    let new_spl = classes.split(' ')\r\n    let old_spl = old?.split(' ')\r\n    let newItems = old_spl? difference(new_spl, old_spl): new_spl\r\n    console.log('new', newItems)\r\n    // let removedItems = difference(old_spl, new_spl)\r\n    // console.log('removedItems', removedItems)\r\n    cg.captureNew(newItems)\r\n}\r\n\r\n\r\nconst difference = function(setA, setB) {\r\n    const _difference = new Set(setA);\r\n    for (const elem of setB) {\r\n        _difference.delete(elem);\r\n    }\r\n    return _difference;\r\n}\r\n\r\n;insertReceiver();\r\n\r\n})()\r\n"],"names":["cg","monitorClasses","node","console","log","eachMutation","mutation","attributeName","classMutationDetection","observer","MutationObserver","mutations","forEach","observe","attributes","subtree","attributeFilter","attributeOldValue","classes","target","classList","value","old","oldValue","new_spl","split","old_spl","newItems","difference","captureNew","setA","setB","_difference","Set","elem","delete","ClassGraph","addons","_cg","prototype","monitor","parent","document","body"],"mappings":"AAWA,MAEA,IAAIA,EAEJ,MAaMC,EAAiB,SAASC,GAO5BC,QAAQC,IAAI,iBAAkBF,GAE9B,IAUIG,EAAe,SAASC,GAEK,SAA1BA,EAASC,eACRC,EAAuBF,EAE9B,EAOGG,EAAW,IAAIC,kBALG,SAASC,GAE3BA,EAAUC,QAAQP,EACrB,IAMD,OAFAI,EAASI,QAAQX,EAxBJ,CACLY,YAAY,EACVC,SAAS,EAETC,gBAAiB,CAAC,SAElBC,mBAAmB,IAoBtBR,CACX,EAGMD,EAAyB,SAASF,GACpC,IAAIY,EAAUZ,EAASa,OAAOC,UAAUC,MACpCC,EAAMhB,EAASiB,SAKfC,EAAUN,EAAQO,MAAM,KACxBC,EAAUJ,GAAKG,MAAM,KACrBE,EAAWD,EAASE,EAAWJ,EAASE,GAAUF,EACtDrB,QAAQC,IAAI,MAAOuB,GAGnB3B,EAAG6B,WAAWF,EAClB,EAGMC,EAAa,SAASE,EAAMC,GAC9B,MAAMC,EAAc,IAAIC,IAAIH,GAC5B,IAAK,MAAMI,KAAQH,EACfC,EAAYG,OAAOD,GAEvB,OAAOF,CACX,EAxEII,WAAWC,OAAOpC,eAAiB,SAASqC,GACxCtC,EAAKsC,CACR,EAEDF,WAAWG,UAAUC,QAAU,SAASC,EAAOC,SAASC,MACpD,OAAO1C,EAAewC,EACzB,CAsEJ,EAnFD"}