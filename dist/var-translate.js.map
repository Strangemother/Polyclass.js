{"version":3,"file":"var-translate.js","sources":["../src/addons/var-translate.js"],"sourcesContent":["/**\r\n * # var-* Translate\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/CSS/var\r\n *\r\n * Discover and rewrite class names values with `var-*` to the CSS function\r\n * `var(*)`. e.g.\r\n *\r\n *     \"border-top-var-primary-edges\"\r\n *\r\n *      {\r\n *          \"border-top\": var(--primary-edges)\r\n *      }\r\n */\r\nconst varTranslateReceiver = (function(){\r\n\r\n    let cg;\r\n\r\n    /**\r\n     * The _automatic_ function called at the base of this iffe to\r\n     * install the `font-pack-*` tokens into the class graph.\r\n     *\r\n     * @return {undefined}\r\n     */\r\n    const insertReceiver = function(){\r\n        console.log('var-translate insertReceiver')\r\n        // DynamicCSSStyleSheet.addons.varTranslateReceiver = function(_cg){\r\n            // cg = _cg;\r\n            // cg.insertReceiver(['var'], varReceiver)\r\n        // }\r\n\r\n        ClassGraph.addons.varTranslateReceiver = function(_cg){\r\n            cg = _cg;\r\n            cg.insertTranslator('var', variableDigest)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The handler function given to the dynamic css stylesheet, called\r\n     * when the dcss is prepared.\r\n     *\r\n     * @param  {object} obj  A definition generated by the class graph discovery\r\n     * @return {undefined}\r\n     */\r\n    const variableDigest =  function(splitObj, index) {\r\n        /*\r\n            Convert the value keys to a var representation.\r\n                `var-name-switch` -> [var, name, switch]\r\n            to\r\n                `var(--name-switch)`\r\n         */\r\n\r\n        /*\r\n            This is pretty dumb, and should improve to a forward stepping\r\n            solution, detecting possible names\r\n\r\n            Issue is a var can be anything `var(--1em)`.\r\n            Therefore forward feed on _possibles_ is sticky. This is valid:\r\n\r\n                {\r\n                    margin: var(--1em) var(--orange)\r\n                }\r\n\r\n            Therefore break on `var`\r\n\r\n                \"margin-var-1em-var-orange\"\r\n\r\n            However `var(--var)` is valid:\r\n                {\r\n                    --var: 1em\r\n                    --var-orange: orange;\r\n                }\r\n\r\n\r\n            Meaning:\r\n                \"margin-var-1em-var-var-orange\"\r\n\r\n            Therefore break on var, unless [var]+1 == var,\r\n                as then its break on var, dont break on next var,\r\n                yielding `var-orange`.`\r\n\r\n            However also allowed: \"margin-var-1em-var-var-var\"\r\n\r\n                {\r\n                    --var-var:\r\n                }\r\n\r\n            So then possibly, two dashes between `var var``\r\n\r\n                margin-var-key--var-var-var-var--var-var-key\r\n\r\n                {\r\n                    margin: var(key) var(var-var-var) var(var-key)\r\n                }\r\n\r\n            Allowing the strange but valid:\r\n                {\r\n                    --var-key: 1em;\r\n                    --var-var-var-var: 2em;\r\n                    --var-var-key: 1em solid;\r\n                }\r\n\r\n         */\r\n        // console.log('running on', splitObj)\r\n        // Tokenize as a family string.\r\n        values = splitObj.values\r\n        let keys = splitObj.values.slice(index)\r\n        let k1 = keys.slice(1)\r\n        let word = `var(--${k1.join(\"-\")})`\r\n        // console.log(keys, word)\r\n\r\n        return word\r\n    }\r\n\r\n\r\n\r\n    ;insertReceiver();\r\n})()\r\n"],"names":["cg","variableDigest","splitObj","index","values","slice","join","console","log","ClassGraph","addons","varTranslateReceiver","_cg","insertTranslator"],"mappings":"CAc6B,WAEzB,IAAIA,EAQJ,MAoBMC,EAAkB,SAASC,EAAUC,GAmEvC,OANAC,OAASF,EAASE,OAGP,SAFAF,EAASE,OAAOC,MAAMF,GACnBE,MAAM,GACGC,KAAK,OAI/B,EAvFGC,QAAQC,IAAI,gCAMZC,WAAWC,OAAOC,qBAAuB,SAASC,GAC9CZ,EAAKY,EACLZ,EAAGa,iBAAiB,MAAOZ,EAC9B,CAmFR,CAvG4B"}